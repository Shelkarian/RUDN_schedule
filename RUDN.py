import json
import requests
import datetime
from aiogram import Bot, Dispatcher, executor, types
import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(token="—Ç–æ–∫–µ–Ω:—Ç–æ–∫–µ–Ω")
dp = Dispatcher(bot)

url = "http://mmis-web.rudn-sochi.ru/api/Rasp?idGroup=1467&sdate=2023-04-27"
r = requests.get(url)
response_dict = json.loads(r.text)
pair = response_dict['data']['rasp']  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ

parsing = ['–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–∞—É–¥–∏—Ç–æ—Ä–∏—è', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–Ω–∞—á–∞–ª–æ', '–∫–æ–Ω–µ—Ü']  # –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –¥–æ—Å—Ç–∞—Ç—å

result = ['   üìï–ü—Ä–µ–¥–º–µ—Ç: ',
          '   üè´–ê—É–¥–∏—Ç–æ—Ä–∏—è: ',
          '   üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥: ',
          '   üïî–í—Ä–µ–º—è: ' ]  # –≤—ã–≤–æ–¥

days = {1: '1Ô∏è‚É£  –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        2: '2Ô∏è‚É£ –í—Ç–æ—Ä–Ω–∏–∫',
        3: '3Ô∏è‚É£ –°—Ä–µ–¥–∞',
        4: '4Ô∏è‚É£ –ß–µ—Ç–≤–µ—Ä–≥',
        5: '5Ô∏è‚É£ –ü—è—Ç–Ω–∏—Ü–∞',
        6: '6Ô∏è‚É£ –°—É–±–±–æ—Ç–∞' }  # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

days_of_the_week = {1: [], 2: [], 3: [], 4: [], 5: [], 6: []}
for number_day in pair:
    days_of_the_week[number_day['–¥–µ–Ω—å–ù–µ–¥–µ–ª–∏']].append(number_day)


def one_pair(pairs):  # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ –¥–Ω—è
    vyvod = 0
    res = ''
    for data in parsing:
        if vyvod != 4:
            res += result[vyvod]
        if vyvod == 3:
            res += pairs[data] + ' - '
        else:
            res += pairs[data] + '\n'
        vyvod += 1
    return res


def week_pair(pairs):  # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–µ–¥–µ–ª–∏ –¥–Ω—è
    vyvod = 0
    res = ''
    for data in parsing:
        if vyvod != 4:
            res += result[vyvod]
        if vyvod == 3:
            res += pairs[data] + ' - '
        else:
            res += pairs[data] + '\n'
        vyvod += 1
    res += '\n'
    return res


def today():
    tod = datetime.date.today()
    day_week = int(datetime.datetime.today().weekday()) + 1
    res = ''
    if day_week != 7:
        res += f'{days[day_week]}\n'
    else:
        return '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!'
    for i in pair:
        if str(tod) in i['–¥–∞—Ç–∞']:
            pairs = i
            res += one_pair(pairs)
            res += '\n'
    return res


def tomorrow():
    tod = datetime.date.today()
    day_week = int(datetime.datetime.today().weekday()) + 2
    tod = int(tod.day) + 1
    res = ''
    if day_week != 7:
        res += f'{days[day_week]}\n'
    else:
        return '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π!'
    for i in pair:
        if str(tod) in i['–¥–∞—Ç–∞']:
            pairs = i
            res += one_pair(pairs)
            res += '\n'

    return res


def week():
    res = ''
    for one_day_of_week in days_of_the_week:
        res += f'{days[one_day_of_week]}\n'
        for j in days_of_the_week[one_day_of_week]:
            res += week_pair(j)
    return res


@dp.message_handler(commands=['today'])
async def get_today(message: types.Message):
    today_pairs = today()
    await message.answer(today_pairs)


@dp.message_handler(commands=['tomorrow'])
async def get_next_day(message: types.Message):
    tomorrow_pairs = tomorrow()
    await message.answer(tomorrow_pairs)


@dp.message_handler(commands=['week'])
async def get_week(message: types.Message):
    week_pairs = week()
    await message.answer(week_pairs)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
